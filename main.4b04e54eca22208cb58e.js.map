{"version":3,"sources":["webpack:///./refs/index.js","webpack:///./refs/refs.js","webpack:///./service/ShapeService.js","webpack:///./app/app.js","webpack:///./app/index.js","webpack:///./index.js"],"names":["refs","div","document","querySelector","interfaceValueCurrentNumber","interfaceValueSurfaceArea","btnShapesNumber","btnGravitiValue","interfaceValueNumberSecond","interfaceValueGraviti","ShapeService","getRandomPosition","min","max","x","Math","floor","random","y","getRandomColor","color","i","setRandomShapes","shape","surfaceArea","PI","drawCircle","drawEllipse","pow","drawStar","drawRect","drawPolygon","App","this","app","PIXI","width","height","backgroundColor","appendChild","view","shapeService","initStageBackground","initListeners","addEventListener","e","target","dataset","action","shapesPerSec","gravitiValue","backGroundApp","lineStyle","beginFill","endFill","interactive","on","renderShape","data","global","stage","addChild","start","setInterval","drawShapes","coords","BOARD_WIDTH","buttonMode","counterShapes","surfaceAreaValue","innerHTML","destroyInterval","clearInterval","destroyShape","destroy"],"mappings":"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","file":"main.4b04e54eca22208cb58e.js","sourcesContent":["import refs from './refs';\r\nexport default refs;\r\n","const refs = {\r\n  div: document.querySelector('.view'),\r\n  interfaceValueCurrentNumber: document.querySelector('.value__current-number'),\r\n  interfaceValueSurfaceArea: document.querySelector('.value__surface-area'),\r\n  btnShapesNumber: document.querySelector('.shapes-number'),\r\n  btnGravitiValue: document.querySelector('.graviti-value'),\r\n  interfaceValueNumberSecond: document.querySelector(\r\n    '[data-name=\"number-second\"]',\r\n  ),\r\n  interfaceValueGraviti: document.querySelector('[data-name=\"graviti-value\"]'),\r\n};\r\n\r\nexport default refs;\r\n","import refs from '../refs';\r\nexport default class ShapeService {\r\n  getRandomPosition(min, max) {\r\n    const randomPositionX = Math.floor(Math.random() * max);\r\n    const startPosition = {\r\n      x: min + randomPositionX,\r\n      y: -50,\r\n    };\r\n    return startPosition;\r\n  }\r\n\r\n  getRandomColor() {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '0x';\r\n    for (let i = 0; i < 6; i += 1) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n  setRandomShapes(shape) {\r\n    const randomIndex = Math.floor(Math.random() * (7 - 1) + 1);\r\n\r\n    switch (randomIndex) {\r\n      case 1:\r\n        shape.surfaceArea = 2 * Math.PI * 32;\r\n        return shape.drawCircle(0, 0, 32);\r\n      case 2:\r\n        shape.surfaceArea = 2 * Math.PI * 50;\r\n        return shape.drawEllipse(0, 50, 100);\r\n      case 3:\r\n        const RCircle = 60;\r\n        shape.surfaceArea = 1.12 * Math.pow(RCircle, 2);\r\n        return shape.drawStar(0, 0, 5, 60);\r\n      case 4:\r\n        const rectSize = 50;\r\n        shape.surfaceArea = Math.pow(rectSize, 2);\r\n        return shape.drawRect(0, 0, rectSize, rectSize);\r\n      case 5:\r\n        shape.surfaceArea = (64 * 64) / 2;\r\n        return shape.drawPolygon([-32, 64, 32, 64, 0, 0]);\r\n      case 6:\r\n        shape.surfaceArea = (32 * 32) / 2 + Math.pow(32, 2);\r\n        return shape.drawPolygon([-32, 32, 32, 32, 32, -32, -32, -32, -64, 0]);\r\n      case 7:\r\n        shape.surfaceArea = (32 * 32) / 2 + Math.pow(32, 2) + (32 * 32) / 2;\r\n        return shape.drawPolygon([\r\n          -64,\r\n          0,\r\n          -32,\r\n          32,\r\n          32,\r\n          32,\r\n          64,\r\n          0,\r\n          32,\r\n          -32,\r\n          -32,\r\n          -32,\r\n        ]);\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import * as PIXI from 'pixi.js';\r\nimport { ShapeService } from '../service';\r\nimport refs from '../refs';\r\nimport './app.css';\r\nconst {\r\n  btnShapesNumber,\r\n  interfaceValueNumberSecond,\r\n  interfaceValueGraviti,\r\n  interfaceValueCurrentNumber,\r\n  interfaceValueSurfaceArea,\r\n  btnGravitiValue,\r\n  div,\r\n} = refs;\r\n\r\nconst SHAPES_INCREMENT = 'shapes-number__increment';\r\nconst SHAPES_DECREMENT = 'shapes-number__decrement';\r\nconst GRAVITI_INCREMENT = 'gravity-value__increment';\r\nconst GRAVITI_DECREMENT = 'gravity-value__decrement';\r\nconst BOARD_WIDTH = 1100;\r\nconst BOARD_HEUGHT = 400;\r\nconst MAX_SHAPE_SIZE = 150;\r\n\r\nexport default class App {\r\n  app = null;\r\n  backGroundApp = null;\r\n  shapes = null;\r\n  shapeService = null;\r\n  shapesPerSec = 1;\r\n  gravitiValue = 1;\r\n  counterShapes = 1;\r\n  surfaceAreaValue = 0;\r\n\r\n  constructor() {\r\n    this.app = new PIXI.Application({\r\n      width: BOARD_WIDTH,\r\n      height: BOARD_HEUGHT,\r\n      backgroundColor: 0x4e3030,\r\n    });\r\n    div.appendChild(this.app.view);\r\n\r\n    this.shapeService = new ShapeService();\r\n    this.initStageBackground();\r\n    this.initListeners();\r\n  }\r\n\r\n  initListeners() {\r\n    btnShapesNumber.addEventListener('click', e => {\r\n      if (e.target.dataset.action === SHAPES_INCREMENT) {\r\n        this.shapesPerSec += 1;\r\n      }\r\n      if (\r\n        e.target?.dataset?.action === SHAPES_DECREMENT &&\r\n        this.shapesPerSec >= 0\r\n      ) {\r\n        this.shapesPerSec -= 1;\r\n      }\r\n    });\r\n\r\n    btnGravitiValue.addEventListener('click', e => {\r\n      if (e.target.dataset.action === GRAVITI_INCREMENT) {\r\n        this.gravitiValue += 1;\r\n      }\r\n      if (\r\n        e.target.dataset.action === GRAVITI_DECREMENT &&\r\n        this.gravitiValue > 1\r\n      ) {\r\n        this.gravitiValue -= 1;\r\n      }\r\n    });\r\n  }\r\n\r\n  initStageBackground() {\r\n    const backGroundApp = new PIXI.Graphics();\r\n    backGroundApp.lineStyle(0, 0xffffff, 1);\r\n    backGroundApp.beginFill(0, 0xffffff, 1);\r\n    backGroundApp.drawRect(0, 0, 1100, 400);\r\n    backGroundApp.endFill();\r\n\r\n    backGroundApp.interactive = true;\r\n    backGroundApp.on('click', e => this.renderShape(e.data?.global));\r\n\r\n    this.app.stage.addChild(backGroundApp);\r\n  }\r\n\r\n  start() {\r\n    setInterval(() => this.drawShapes(), 1000);\r\n  }\r\n\r\n  drawShapes() {\r\n    for (let i = 1; i <= this.shapesPerSec; i += 1) {\r\n      const coords = this.shapeService.getRandomPosition(\r\n        MAX_SHAPE_SIZE,\r\n        BOARD_WIDTH - MAX_SHAPE_SIZE,\r\n      );\r\n      this.renderShape(coords);\r\n    }\r\n  }\r\n\r\n  renderShape({ x, y }) {\r\n    const shape = new PIXI.Graphics();\r\n\r\n    shape.lineStyle(0, 0xffffff, 1);\r\n\r\n    shape.beginFill(this.shapeService.getRandomColor());\r\n    this.shapeService.setRandomShapes(shape);\r\n    shape.endFill();\r\n    shape.x = x;\r\n    shape.y = y;\r\n    shape.interactive = true;\r\n    shape.buttonMode = true;\r\n    this.app.stage.addChild(shape);\r\n\r\n    this.counterShapes += 1;\r\n    this.surfaceAreaValue += shape.surfaceArea;\r\n\r\n    interfaceValueCurrentNumber.innerHTML = this.counterShapes;\r\n    interfaceValueSurfaceArea.innerHTML = Math.floor(this.surfaceAreaValue);\r\n    interfaceValueNumberSecond.innerHTML = this.shapesPerSec;\r\n    interfaceValueGraviti.innerHTML = this.gravitiValue;\r\n\r\n    const destroyInterval = setInterval(() => {\r\n      shape.y = shape.y + this.gravitiValue;\r\n\r\n      if (shape.y > 500) {\r\n        clearInterval(destroyInterval);\r\n        this.destroyShape(shape);\r\n      }\r\n    }, 50);\r\n\r\n    shape.on('click', e => {\r\n      clearInterval(destroyInterval);\r\n      this.destroyShape(shape);\r\n    });\r\n  }\r\n\r\n  destroyShape(shape) {\r\n    this.counterShapes -= 1;\r\n    this.surfaceAreaValue -= shape.surfaceArea;\r\n\r\n    interfaceValueCurrentNumber.innerHTML = this.counterShapes;\r\n    interfaceValueSurfaceArea.innerHTML = Math.floor(this.surfaceAreaValue);\r\n    shape.destroy(true);\r\n  }\r\n}\r\n","import App from './app';\r\nexport default App;\r\n","import App from './app';\nimport refs from './refs';\nimport { shapesInterval } from './service';\nimport './styles.css';\n\nconst app = new App();\napp.start();\n"],"sourceRoot":""}